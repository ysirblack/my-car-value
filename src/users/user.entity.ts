import {OneToMany ,AfterInsert, AfterRemove, AfterUpdate, Entity, Column, PrimaryGeneratedColumn } from "typeorm";
import { Report } from "src/reports/report.entity";
import { ReportsController } from "src/reports/reports.controller";
//This will be used in a repository. This will be our entity. Our database will create a table 
//using this entity. It will have id column, email column , password column. Each row will show
//an id, email and password informations.ID will be generated by database. For every input
//id will be increased by one. 

//?OneToMay decorator, makes the decorated entity will have relation like one to many, it means
//?when this is as ONE , some other entities from another table(repor.entity for us right now) will 
//?assigned to MANY . For example ONE user ID will have many REPORTS ID.

@Entity( )
export class User {

    @PrimaryGeneratedColumn()
    id: number 

    @Column()
    email: string

    @Column()
    password: string

    //one user will have many reports
    @OneToMany(()=> Report, (report) => report.user )//This callback function measn that, when javascript loads everything                  
    reports: Report[];                              //user.entity or report.entity will be compiled first and the other one
    //An array Holds Reports inside,                //wouldn't be compiled and will be undefined, because of this, callback functions
                                                    //are executed after everything compiled. So report entity and user entity together
                                                    //will be defined.
   
    //After a new input inserted to db, console log this message.
    @AfterInsert()
    logInsert(){
        console.log("Inserted User with id", this.id)
    }

    //After a new input updated, console log this message.
    @AfterUpdate()
    logUpdate(){
        console.log("Updated User with id", this.id)
    }

    //After a new input remoced, console log this message.
    @AfterRemove()
    logRemove(){
        console.log("Removed User with id", this.id)
    }
}
